AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Cisco Systems - Creates the necessary policies, roles, security group and
  launches Cisco ASAv Instance(s)
Metadata:
  AWSAMIRegionMap:
    ap-northeast-1:
      HVM64: ami-0a3edbc2d49adc91d
    ap-northeast-2:
      HVM64: ami-0af3424b4002357f9
    ap-south-1:
      HVM64: ami-03cb656947137819f
    ap-southeast-1:
      HVM64: ami-0b7894d0f1e3bed77
    ap-southeast-2:
      HVM64: ami-007f91f7f2d993488
    ca-central-1:
      HVM64: ami-0dc3f05a9252ed7da
    eu-central-1:
      HVM64: ami-0ee46892e1b42f1ab
    eu-west-1:
      HVM64: ami-0e613bce9530d3420
    eu-west-2:
      HVM64: ami-0e86eefd5d88adc58
    eu-north-1:
      HVM64: ami-01eaad7c0b0952545
    sa-east-1:
      HVM64: ami-0901fb8b9d6e728e4
    us-east-1:
      HVM64: ami-0e7b5b45f2bb25f94
    us-east-2:
      HVM64: ami-089b209822f3c0760
    us-gov-west-1:
      HVM64: ami-c6a189a7
    us-west-1:
      HVM64: ami-0a6411e109ba2cd67
    us-west-2:
      HVM64: ami-0e8bfd9ebc1c0e78e
    ParameterGroups:
      - Label:
          default: ASAv Configuration
        Parameters:
          - InstanceTypeParam
          - KeyPair
          - MgmtSubnet1CIDR
          - MgmtSubnet2CIDR
          - MgmtSubnet3CIDR  
          - PrivateSubnet1ID
          - PrivateSubnet2ID
          - PrivateSubnet3ID
          - PublicSubnet1ID
          - PublicSubnet2ID
          - PublicSubnet3ID
          - VPCID
          - DnsName
          - VPCMASK
          - VPCPOOL
          - VPNUser
          - VPNPassword
        #  - OnPremCIDR
          - OnPremMask
          - OnPremPool
          - ASAv1HostName
          - VPNPoolFrom1
          - VPNPoolTo1
          - VPNPoolMask1
          - PrivateSubnet1GW
          - PrivateSubnet1CIDR
          - PrivateSubnet1Pool
          - PrivateSubnet1Mask
          - ASAv2HostName
          - VPNPoolFrom2
          - VPNPoolTo2
          - VPNPoolMask2
          - PrivateSubnet2GW
          - PrivateSubnet2CIDR
          - PrivateSubnet2Pool
          - PrivateSubnet2Mask
          - ASAv3HostName
          - VPNPoolFrom3
          - VPNPoolTo3
          - VPNPoolMask3
          - PrivateSubnet3GW
          - PrivateSubnet3CIDR
          - PrivateSubnet3Pool
          - PrivateSubnet3Mask
    ParameterLabels:
      InstanceTypeParam:
        default: ASAv instance type
      KeyPair:
        default: keypair name
      MgmtSubnet1CIDR:
        default: Mgmt subnet 1
      MgmtSubnet2CIDR:
        default: Mgmt subnet 2
      MgmtSubnet3CIDR:
        default: Mgmt subnet 3
      PrivateSubnet1ID:
        default: Private subnet 1
      PrivateSubnet2ID:
        default: Private subnet 2
      PrivateSubnet3ID:
        default: Private subnet 3
      PublicSubnet1ID:
        default: Public subnet 1
      PublicSubnet2ID:
        default: Public subnet 2
      PublicSubnet3ID:
        default: Public subnet 3
      VPCID:
        default: VPC ID
      VPNUser:
        default: VPN User
      VPNPassword:
        default: VPN Password
      DnsName:
        default: Dns name
      VPCMASK:
        default: netmask of VPC
      VPCPOOL:
        default: pool of VPC
      #OnPremCIDR:
      #  default: onprem network CIDR
      OnPremMask:
        default: onprem network MASK
      OnPremPool:
        default: onprem pool
      ASAv1HostName:
        default: ASAv1 Hostname
      VPNPoolFrom1:
        default: VPN Pool Start
      VPNPoolTo1:
        default: VPN Pool Finish
      VPNPoolMask1:
        default: NETMASK of VPN Pool
      PrivateSubnet1GW:
        default: private subnet GW
      PrivateSubnet1CIDR:
        default: private subnet CIDR format
      PrivateSubnet1Pool:
        default: Private subnet pool
      PrivateSubnet1Mask:
        default: Private subnet mask
      ASAv2HostName:
        default: ASAv2 Hostname
      VPNPoolFrom2:
        default: VPN Pool Start
      VPNPoolTo2:
        default: VPN Pool Finish
      VPNPoolMask2:
        default: NETMASK of VPN Pool
      PrivateSubnet2GW:
        default: private subnet GW
      PrivateSubnet2CIDR:
        default: private subnet CIDR format
      PrivateSubnet2Pool:
        default: Private subnet pool
      PrivateSubnet2Mask:
        default: Private subnet mask
      ASAv3HostName:
        default: ASAv3 Hostname
      VPNPoolFrom3:
        default: VPN Pool Start
      VPNPoolTo3:
        default: VPN Pool Finish
      VPNPoolMask3:
        default: NETMASK of VPN Pool
      PrivateSubnet3GW:
        default: private subnet GW
      PrivateSubnet3CIDR:
        default: private subnet CIDR format
      PrivateSubnet3Pool:
        default: Private subnet pool
      PrivateSubnet3Mask:
        default: Private subnet mask
Parameters:
  KeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: ASAv instances will launch with this keypair
  InstanceTypeParam:
    Type: String
    Default: c5.large
    AllowedValues:
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
    Description: Select an instance size for the ASAv.
  MgmtSubnet1CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    #Default: 10.0.192.0/24
    Description: CIDR block for Mgmt subnet 1 in Availability Zone 1
    Type: String
  MgmtSubnet2CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    #Default: 10.0.200.0/24
    Description: CIDR block for Mgmt subnet 2 in Availability Zone 2
    Type: String
  MgmtSubnet3CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    #Default: 10.0.200.0/24
    Description: CIDR block for Mgmt subnet 3 in Availability Zone 3
    Type: String
  VPCID:
    Type: AWS::EC2::VPC::Id
    Description: Select VPC which ASAv will be deployed in
  PrivateSubnet1ID:
    Type: AWS::EC2::Subnet::Id
    Description: Private Subnet 1 ID
  PrivateSubnet2ID:
    Type: AWS::EC2::Subnet::Id
    Description: Private Subnet 2 ID
  PrivateSubnet3ID:
    Type: AWS::EC2::Subnet::Id
    Description: Private Subnet 3 ID
  PublicSubnet1ID:
    Type: AWS::EC2::Subnet::Id
    Description: Public Subnet 1 ID
  PublicSubnet2ID:
    Type: AWS::EC2::Subnet::Id
    Description: Public Subnet 2 ID
  PublicSubnet3ID:
    Type: AWS::EC2::Subnet::Id
    Description: Public Subnet 3 ID
  DnsName:
    Type: String
    Description: DNS name of PrivateHostedZone
    Default: example.com
  VPCMASK:
    Type: String
    Description: netmask of VPC
  VPCPOOL:
    Type: String
    Description: pool of VPC
  VPNUser:
    Type: String
    Description: Test VPN Username
  VPNPassword:
    Type: String
    Description: Test VPN Password
  #OnPremCIDR:
  #  AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
  #  ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
  #  #Default: 10.0.0.0/16
  #  Description: CIDR block for the On-prem network
  #  Type: String
  OnPremMask:
    Type: String
    Description: onprem network MASK
  OnPremPool:
    Type: String
    Description: onprem pool
  ASAv1HostName:
    Type: String
    Description: ASAv1 Hostname
  VPNPoolFrom1:
    Type: String
    Description: VPN Pool Start
  VPNPoolTo1:
    Type: String
    Description: VPN Pool Finish
  VPNPoolMask1:
    Type: String
    Description: NETMASK of VPN Pool
  PrivateSubnet1GW:
    Type: String
    Description: private subnet GW
  PrivateSubnet1CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    #Default: 10.0.0.0/16
    Description: CIDR block for the On-prem network
    Type: String
  PrivateSubnet1Pool:
    Type: String
    Description: Private subnet pool
  PrivateSubnet1Mask:
    Type: String
    Description: Private subnet mask
  ASAv2HostName:
    Type: String
    Description: ASAv2 Hostname
  VPNPoolFrom2:
    Type: String
    Description: VPN Pool Start
  VPNPoolTo2:
    Type: String
    Description: VPN Pool Finish
  VPNPoolMask2:
    Type: String
    Description: NETMASK of VPN Pool
  PrivateSubnet2GW:
    Type: String
    Description: private subnet GW
  PrivateSubnet2CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    #Default: 10.0.0.0/16
    Description: CIDR block for the On-prem network
    Type: String
  PrivateSubnet2Pool:
    Type: String
    Description: Private subnet pool
  PrivateSubnet2Mask:
    Type: String
    Description: Private subnet mask
  ASAv3HostName:
    Type: String
    Description: ASAv3 Hostname
  VPNPoolFrom3:
    Type: String
    Description: VPN Pool Start
  VPNPoolTo3:
    Type: String
    Description: VPN Pool Finish
  VPNPoolMask3:
    Type: String
    Description: NETMASK of VPN Pool
  PrivateSubnet3GW:
    Type: String
    Description: private subnet GW
  PrivateSubnet3CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    #Default: 10.0.0.0/16
    Description: CIDR block for the On-prem network
    Type: String
  PrivateSubnet3Pool:
    Type: String
    Description: Private subnet pool
  PrivateSubnet3Mask:
    Type: String
    Description: Private subnet mask
Mappings:
  AWSAMIRegionMap:
    ap-northeast-1:
      HVM64: ami-0a3edbc2d49adc91d
    ap-northeast-2:
      HVM64: ami-0af3424b4002357f9
    ap-south-1:
      HVM64: ami-03cb656947137819f
    ap-southeast-1:
      HVM64: ami-0b7894d0f1e3bed77
    ap-southeast-2:
      HVM64: ami-007f91f7f2d993488
    ca-central-1:
      HVM64: ami-0dc3f05a9252ed7da
    eu-central-1:
      HVM64: ami-0ee46892e1b42f1ab
    eu-west-1:
      HVM64: ami-0e613bce9530d3420
    eu-west-2:
      HVM64: ami-0e86eefd5d88adc58
    eu-north-1:
      HVM64: ami-01eaad7c0b0952545
    sa-east-1:
      HVM64: ami-0901fb8b9d6e728e4
    us-east-1:
      HVM64: ami-0e7b5b45f2bb25f94
    us-east-2:
      HVM64: ami-089b209822f3c0760
    us-gov-west-1:
      HVM64: ami-c6a189a7
    us-west-1:
      HVM64: ami-0a6411e109ba2cd67
    us-west-2:
      HVM64: ami-0e8bfd9ebc1c0e78e
Resources:
  PrivateHostedZone: 
    Type: "AWS::Route53::HostedZone"
    Properties: 
      HostedZoneConfig: 
        Comment: 'Hosted zone'
      Name: !Ref DnsName
      VPCs: 
        - 
          VPCId: !Ref VPCID
          VPCRegion: !Ref "AWS::Region"
      HostedZoneTags: 
        - 
          Key: 'Name'
          Value: 'ASAvHostedZone'
  ASAvDNSRecord1:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref PrivateHostedZone
      Name: 
        !Join
          - '.'
          - - 'vpn'
            - !Ref DnsName
      TTL:  '5'
      Type: A
      HealthCheckId: !Ref R53HealthCheck1
      SetIdentifier: Frontend One
      Weight: 4
      ResourceRecords:
      - !Ref outsideIP1
  R53HealthCheck1: 
    Type: 'AWS::Route53::HealthCheck'
    Properties: 
      HealthCheckConfig: 
        IPAddress: !Ref outsideIP1
        Port: 443
        Type: HTTP_STR_MATCH
        ResourcePath: '/'
        RequestInterval: 30
        FailureThreshold: 5
        MeasureLatency: true
        SearchString: '+CSCOE+'
      HealthCheckTags: 
        - 
          Key: Name
          Value: ASAv1Healthcheck1
  ASAvDNSRecord2:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref PrivateHostedZone
      Name: 
        !Join
          - '.'
          - - 'vpn'
            - !Ref DnsName
      TTL:  '5'
      Type: A
      HealthCheckId: !Ref R53HealthCheck2
      SetIdentifier: Frontend Two
      Weight: 4
      ResourceRecords:
      - !Ref outsideIP2
  R53HealthCheck2: 
    Type: 'AWS::Route53::HealthCheck'
    Properties: 
      HealthCheckConfig: 
        IPAddress: !Ref outsideIP2
        Port: 443
        Type: HTTP_STR_MATCH
        ResourcePath: '/'
        RequestInterval: 30
        FailureThreshold: 5
        MeasureLatency: true
        SearchString: '+CSCOE+'
      HealthCheckTags: 
        - 
          Key: Name
          Value: ASAv1Healthcheck2
  ASAvDNSRecord3:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref PrivateHostedZone
      Name: 
        !Join
          - '.'
          - - 'vpn'
            - !Ref DnsName
      TTL:  '5'
      Type: A
      HealthCheckId: !Ref R53HealthCheck3
      SetIdentifier: Frontend Three
      Weight: 4
      ResourceRecords:
      - !Ref outsideIP3
  R53HealthCheck3: 
    Type: 'AWS::Route53::HealthCheck'
    Properties: 
      HealthCheckConfig: 
        IPAddress: !Ref outsideIP3
        Port: 443
        Type: HTTP_STR_MATCH
        ResourcePath: '/'
        RequestInterval: 30
        FailureThreshold: 5
        MeasureLatency: true
        SearchString: '+CSCOE+'
      HealthCheckTags: 
        - 
          Key: Name
          Value: ASAv1Healthcheck3
  MgmtSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCID
      CidrBlock: !Ref 'MgmtSubnet1CIDR'
      AvailabilityZone: 
        Fn::Select: 
          - 0
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: Mgmt subnet 1
  MgmtSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCID
      CidrBlock: !Ref 'MgmtSubnet2CIDR'
      AvailabilityZone: 
        Fn::Select: 
          - 1
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: Mgmt subnet 2
  MgmtSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCID
      CidrBlock: !Ref 'MgmtSubnet3CIDR'
      AvailabilityZone: 
        Fn::Select: 
          - 2
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: Mgmt subnet 3
  ASAvInstanceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Security Group for ASAv Instances
        VpcId: !Ref VPCID
        Tags:
        - Key: Name
          Value: "ASAvSecurityGroup"
        SecurityGroupIngress:
        - IpProtocol: "-1"
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        - IpProtocol: "-1"
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
        - IpProtocol: "-1"
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0  
  outsideIP1:
      Type: AWS::EC2::EIP
      Properties:
        Domain: vpc        
  associateOutsideIP1:
      Type: AWS::EC2::EIPAssociation
      Properties:
        AllocationId: !GetAtt outsideIP1.AllocationId 
        NetworkInterfaceId: !Ref outsideENI1
  outsideIP2:
      Type: AWS::EC2::EIP
      Properties:
        Domain: vpc        
  associateOutsideIP2:
      Type: AWS::EC2::EIPAssociation
      Properties:
        AllocationId: !GetAtt outsideIP2.AllocationId 
        NetworkInterfaceId: !Ref outsideENI2
  outsideIP3:
      Type: AWS::EC2::EIP
      Properties:
        Domain: vpc        
  associateOutsideIP3:
      Type: AWS::EC2::EIPAssociation
      Properties:
        AllocationId: !GetAtt outsideIP3.AllocationId 
        NetworkInterfaceId: !Ref outsideENI3
  mgmtENI1:
      Type: AWS::EC2::NetworkInterface
      Properties:
         Tags:
         - Key: Name
           Value: MgmtEni1
         Description: A nice description.
         SourceDestCheck: false
         GroupSet:
         - !Ref 'ASAvInstanceSG'
         SubnetId: !Ref MgmtSubnet1
  outsideENI1:
      Type: AWS::EC2::NetworkInterface
      Properties:
         Tags:
         - Key: Name
           Value: OutsideEni1
         Description: A nice description.
         SourceDestCheck: false
         GroupSet:
         - !Ref 'ASAvInstanceSG'
         SubnetId: !Ref PublicSubnet1ID
  InsideENI1:
      Type: AWS::EC2::NetworkInterface
      Properties:
         Tags:
         - Key: Name
           Value: InsideEni1
         Description: A nice description.
         SourceDestCheck: false
         GroupSet:
         - !Ref 'ASAvInstanceSG'
         SubnetId: !Ref PrivateSubnet1ID
  mgmtENI2:
      Type: AWS::EC2::NetworkInterface
      Properties:
         Tags:
         - Key: Name
           Value: MgmtEni2
         Description: A nice description.
         SourceDestCheck: false
         GroupSet:
         - !Ref 'ASAvInstanceSG'
         SubnetId: !Ref MgmtSubnet2
  outsideENI2:
      Type: AWS::EC2::NetworkInterface
      Properties:
         Tags:
         - Key: Name
           Value: OutsideEni2
         Description: A nice description.
         SourceDestCheck: false
         GroupSet:
         - !Ref 'ASAvInstanceSG'
         SubnetId: !Ref PublicSubnet2ID
  InsideENI2:
      Type: AWS::EC2::NetworkInterface
      Properties:
         Tags:
         - Key: Name
           Value: InsideEni2
         Description: A nice description.
         SourceDestCheck: false
         GroupSet:
         - !Ref 'ASAvInstanceSG'
         SubnetId: !Ref PrivateSubnet2ID  
  mgmtENI3:
      Type: AWS::EC2::NetworkInterface
      Properties:
         Tags:
         - Key: Name
           Value: MgmtEni3
         Description: A nice description.
         SourceDestCheck: false
         GroupSet:
         - !Ref 'ASAvInstanceSG'
         SubnetId: !Ref MgmtSubnet3
  outsideENI3:
      Type: AWS::EC2::NetworkInterface
      Properties:
         Tags:
         - Key: Name
           Value: OutsideEni3
         Description: A nice description.
         SourceDestCheck: false
         GroupSet:
         - !Ref 'ASAvInstanceSG'
         SubnetId: !Ref PublicSubnet3ID
  InsideENI3:
      Type: AWS::EC2::NetworkInterface
      Properties:
         Tags:
         - Key: Name
           Value: InsideEni3
         Description: A nice description.
         SourceDestCheck: false
         GroupSet:
         - !Ref 'ASAvInstanceSG'
         SubnetId: !Ref PrivateSubnet3ID  
  ASAvInstance1:
    Type: 'AWS::EC2::Instance'
    Properties:
      Tags:
        - Key: Name
          Value: !Ref ASAv1HostName
      InstanceType: !Ref InstanceTypeParam
      KeyName: !Ref KeyPair
      ImageId: !FindInMap 
        - AWSAMIRegionMap
        - !Ref 'AWS::Region'
        - HVM64
      NetworkInterfaces:
       - NetworkInterfaceId: !Ref 'mgmtENI1'
         DeviceIndex: '0'
       - NetworkInterfaceId: !Ref 'outsideENI1'
         DeviceIndex: '1'
       - NetworkInterfaceId: !Ref 'InsideENI1'
         DeviceIndex: '2'
      UserData:
        Fn::Base64: !Sub  |
            ! ASA Version
            hostname ${ASAv1HostName}
            !
            ip local pool VPN-POOL ${VPNPoolFrom1}-${VPNPoolTo1} mask ${VPNPoolMask1}
            access-list split standard permit ${VPCPOOL} ${VPCMASK}
            access-list split standard permit ${OnPremPool} ${OnPremMask} 
            !
            username ${VPNUser} password ${VPNPassword}
            username ${VPNUser} attributes
            service-type remote-access
            !
            int tengi 0/0
            nameif outside
            security-level 0
            ip address dhcp setroute
            no shut
            int tengi 0/1
            nameif inside
            security-level 100
            ip address dhcp
            no shut 
            interface management0/0
            nameif management
            security-level 100
            ip address dhcp
            no shut
            !
            !
            webvpn
            enable outside
            anyconnect image disk0:/anyconnect-macos-4.8.02045-webdeploy-k9.pkg 1
            anyconnect enable
            tunnel-group-list enable
            group-policy LAB internal
            group-policy LAB attributes
            vpn-tunnel-protocol ssl-client ssl-clientless
            address-pools value VPN-POOL
            split-tunnel-policy tunnelspecified
            split-tunnel-network-list value split
            dynamic-access-policy-record DfltAccessPolicy
            username admin nopassword privilege 15
            tunnel-group LAB type remote-access
            tunnel-group LAB general-attributes
            default-group-policy LAB
            address-pool VPN-POOL
            tunnel-group LAB webvpn-attributes
            group-alias LAB-VPN enable
            !
            dns domain-lookup outside
            dns server-group DefaultDNS
            name-server 208.67.222.222
            name-server 208.67.220.220
            !
            same-security-traffic permit inter-interface
            same-security-traffic permit intra-interface
            !
            route inside ${OnPremPool} ${OnPremMask} ${PrivateSubnet1GW}
            !
            policy-map global_policy
            class inspection_default
              inspect icmp
            !
            access-list 101 extended permit ip any any 
            access-group 101 in interface outside
            access-group 101 in interface inside
            !
            object network NET-${PrivateSubnet1CIDR}
            subnet ${PrivateSubnet1Pool} ${PrivateSubnet1Mask}
            nat (inside,outside) dynamic interface
            !
            crypto key generate rsa modulus 2048
            ssh 0 0 inside
            ssh 0 0 outside
            ssh 0 0 management
            ssh timeout 30
            aaa authentication ssh console LOCAL
            username admin nopassword privilege 15
            username admin attributes
            service-type admin
            !
            name 129.6.15.28 time-a.nist.gov
            name 129.6.15.29 time-b.nist.gov
            name 129.6.15.30 time-c.nist.gov
            ntp server time-c.nist.gov
            ntp server time-b.nist.gov
            ntp server time-a.nist.gov
            icmp permit any outside
            icmp permit any inside
            icmp permit any management
            !
  ASAvInstance2:
    Type: 'AWS::EC2::Instance'
    Properties:
      Tags:
        - Key: Name
          Value: !Ref ASAv2HostName
      InstanceType: !Ref InstanceTypeParam
      KeyName: !Ref KeyPair
      ImageId: !FindInMap 
        - AWSAMIRegionMap
        - !Ref 'AWS::Region'
        - HVM64
      NetworkInterfaces:
       - NetworkInterfaceId: !Ref 'mgmtENI2'
         DeviceIndex: '0'
       - NetworkInterfaceId: !Ref 'outsideENI2'
         DeviceIndex: '1'
       - NetworkInterfaceId: !Ref 'InsideENI2'
         DeviceIndex: '2'
      UserData:
        Fn::Base64: !Sub |
            ! ASA Version
            hostname ${ASAv2HostName}
            !
            ip local pool VPN-POOL ${VPNPoolFrom2}-${VPNPoolTo2} mask ${VPNPoolMask2}
            access-list split standard permit ${VPCPOOL} ${VPCMASK}
            access-list split standard permit ${OnPremPool} ${OnPremMask} 
            !
            username ${VPNUser} password ${VPNPassword}
            username ${VPNUser} attributes
            service-type remote-access
            !
            int tengi 0/0
            nameif outside
            security-level 0
            ip address dhcp setroute
            no shut
            int tengi 0/1
            nameif inside
            security-level 100
            ip address dhcp
            no shut 
            interface management0/0
            nameif management
            security-level 100
            ip address dhcp
            no shut
            !
            !
            webvpn
            enable outside
            anyconnect image disk0:/anyconnect-macos-4.8.02045-webdeploy-k9.pkg 1
            anyconnect enable
            tunnel-group-list enable
            group-policy LAB internal
            group-policy LAB attributes
            vpn-tunnel-protocol ssl-client ssl-clientless
            address-pools value VPN-POOL
            split-tunnel-policy tunnelspecified
            split-tunnel-network-list value split
            dynamic-access-policy-record DfltAccessPolicy
            username admin nopassword privilege 15
            tunnel-group LAB type remote-access
            tunnel-group LAB general-attributes
            default-group-policy LAB
            address-pool VPN-POOL
            tunnel-group LAB webvpn-attributes
            group-alias LAB-VPN enable
            !
            dns domain-lookup outside
            dns server-group DefaultDNS
            name-server 208.67.222.222
            name-server 208.67.220.220
            !
            same-security-traffic permit inter-interface
            same-security-traffic permit intra-interface
            !
            route inside ${OnPremPool} ${OnPremMask} ${PrivateSubnet2GW}
            !
            policy-map global_policy
            class inspection_default
              inspect icmp
            !
            access-list 101 extended permit ip any any 
            access-group 101 in interface outside
            access-group 101 in interface inside
            !
            object network NET-${PrivateSubnet2CIDR}
            subnet ${PrivateSubnet2Pool} ${PrivateSubnet2Mask}
            nat (inside,outside) dynamic interface
            !
            crypto key generate rsa modulus 2048
            ssh 0 0 inside
            ssh 0 0 outside
            ssh 0 0 management
            ssh timeout 30
            aaa authentication ssh console LOCAL
            username admin nopassword privilege 15
            username admin attributes
            service-type admin
            !
            name 129.6.15.28 time-a.nist.gov
            name 129.6.15.29 time-b.nist.gov
            name 129.6.15.30 time-c.nist.gov
            ntp server time-c.nist.gov
            ntp server time-b.nist.gov
            ntp server time-a.nist.gov
            icmp permit any outside
            icmp permit any inside
            icmp permit any management
            !
  ASAvInstance3:
    Type: 'AWS::EC2::Instance'
    Properties:
      Tags:
        - Key: Name
          Value: !Ref ASAv3HostName
      InstanceType: !Ref InstanceTypeParam
      KeyName: !Ref KeyPair
      ImageId: !FindInMap 
        - AWSAMIRegionMap
        - !Ref 'AWS::Region'
        - HVM64
      NetworkInterfaces:
       - NetworkInterfaceId: !Ref 'mgmtENI3'
         DeviceIndex: '0'
       - NetworkInterfaceId: !Ref 'outsideENI3'
         DeviceIndex: '1'
       - NetworkInterfaceId: !Ref 'InsideENI3'
         DeviceIndex: '2'
      UserData:
        Fn::Base64: !Sub |
            ! ASA Version
            hostname ${ASAv3HostName}
            !
            ip local pool VPN-POOL ${VPNPoolFrom3}-${VPNPoolTo3} mask ${VPNPoolMask3}
            access-list split standard permit ${VPCPOOL} ${VPCMASK}
            access-list split standard permit ${OnPremPool} ${OnPremMask} 
            !
            username ${VPNUser} password ${VPNPassword}
            username ${VPNUser} attributes
            service-type remote-access
            !
            int tengi 0/0
            nameif outside
            security-level 0
            ip address dhcp setroute
            no shut
            int tengi 0/1
            nameif inside
            security-level 100
            ip address dhcp
            no shut 
            interface management0/0
            nameif management
            security-level 100
            ip address dhcp
            no shut
            !
            !
            webvpn
            enable outside
            anyconnect image disk0:/anyconnect-macos-4.8.02045-webdeploy-k9.pkg 1
            anyconnect enable
            tunnel-group-list enable
            group-policy LAB internal
            group-policy LAB attributes
            vpn-tunnel-protocol ssl-client ssl-clientless
            address-pools value VPN-POOL
            split-tunnel-policy tunnelspecified
            split-tunnel-network-list value split
            dynamic-access-policy-record DfltAccessPolicy
            username admin nopassword privilege 15
            tunnel-group LAB type remote-access
            tunnel-group LAB general-attributes
            default-group-policy LAB
            address-pool VPN-POOL
            tunnel-group LAB webvpn-attributes
            group-alias LAB-VPN enable
            !
            dns domain-lookup outside
            dns server-group DefaultDNS
            name-server 208.67.222.222
            name-server 208.67.220.220
            !
            same-security-traffic permit inter-interface
            same-security-traffic permit intra-interface
            !
            route inside ${OnPremPool} ${OnPremMask} ${PrivateSubnet3GW}
            !
            policy-map global_policy
            class inspection_default
              inspect icmp
            !
            access-list 101 extended permit ip any any 
            access-group 101 in interface outside
            access-group 101 in interface inside
            !
            object network NET-${PrivateSubnet3CIDR}
            subnet ${PrivateSubnet3Pool} ${PrivateSubnet3Mask}
            nat (inside,outside) dynamic interface
            !
            crypto key generate rsa modulus 2048
            ssh 0 0 inside
            ssh 0 0 outside
            ssh 0 0 management
            ssh timeout 30
            aaa authentication ssh console LOCAL
            username admin nopassword privilege 15
            username admin attributes
            service-type admin
            !
            name 129.6.15.28 time-a.nist.gov
            name 129.6.15.29 time-b.nist.gov
            name 129.6.15.30 time-c.nist.gov
            ntp server time-c.nist.gov
            ntp server time-b.nist.gov
            ntp server time-a.nist.gov
            icmp permit any outside
            icmp permit any inside
            icmp permit any management
            !
Outputs:
  AccountId:
    Description: Amazon Account ID
    Value: !Ref 'AWS::AccountId'
  MgmtSubnet1CIDR:
    Description: Mgmt subnet 1 CIDR in Availability Zone 1
    Value: !Ref 'MgmtSubnet1CIDR'
    Export:
      Name: !Sub '${AWS::StackName}-MgmtSubnet1CIDR'
  MgmtSubnet1ID:
    Description: Mgmt subnet 1 ID in Availability Zone 1
    Value: !Ref 'MgmtSubnet1'
    Export:
      Name: !Sub '${AWS::StackName}-MgmtSubnet1ID'
  MgmtSubnet2CIDR:
    Description: Mgmt subnet 2 CIDR in Availability Zone 2
    Value: !Ref 'MgmtSubnet2CIDR'
    Export:
      Name: !Sub '${AWS::StackName}-MgmtSubnet2CIDR'
  MgmtSubnet2ID:
    Description: Mgmt subnet 2 ID in Availability Zone 2
    Value: !Ref 'MgmtSubnet2'
    Export:
      Name: !Sub '${AWS::StackName}-MgmtSubnet2ID'
  MgmtSubnet3CIDR:
    Description: Mgmt subnet 3 CIDR in Availability Zone 3
    Value: !Ref 'MgmtSubnet3CIDR'
    Export:
      Name: !Sub '${AWS::StackName}-MgmtSubnet3CIDR'
  MgmtSubnet3ID:
    Description: Mgmt subnet 3 ID in Availability Zone 3
    Value: !Ref 'MgmtSubnet3'
    Export:
      Name: !Sub '${AWS::StackName}-MgmtSubnet3ID'
  InsideENI1:
    Description: ASAv Instance 1 Inside Network Interface ID
    Value: !Ref 'InsideENI1'
    Export:
      Name: !Sub '${AWS::StackName}-InsideENI1'
  InsideENI2:
    Description: ASAv Instance 2 Inside Network Interface ID
    Value: !Ref 'InsideENI2'
    Export:
      Name: !Sub '${AWS::StackName}-InsideENI2'
  InsideENI3:
    Description: ASAv Instance 3 Inside Network Interface ID
    Value: !Ref 'InsideENI3'
    Export:
      Name: !Sub '${AWS::StackName}-InsideENI3'